
services:
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - app_network
    volumes:
      - zookeeper_data:/data
      - zookeeper_datalog:/datalog

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://localhost:9092"
      KAFKA_LISTENERS: "PLAINTEXT://0.0.0.0:9092"
      KAFKA_BROKER_ID: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - app_network
    volumes:
      - kafka_data:/var/lib/kafka/data

  postgres:
    image: postgres:latest
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network

  app:
    build: .
    container_name: predictive_maintenance_app
    depends_on:
      - kafka
      - postgres
    ports:
      - "8050:8050"
    environment:
      - KAFKA_BROKER=kafka:9092
      - POSTGRES_HOST=postgres
    volumes:
      - ./config.json:/app/config.json

networks:
  app_network:  # Definir la red para todos los servicios
    driver: bridge

volumes:
  zookeeper_data:
  zookeeper_datalog:
  kafka_data:
  postgres_data:
